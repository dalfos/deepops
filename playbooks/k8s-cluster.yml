---
# Kubernetes Cluster Playbook

# Install python required for Ansible
- include: bootstrap-python.yml
  tags:
    - bootstrap

# Make sure Kubespray submodule is correct
- hosts: all
  gather_facts: false
  tasks:
    - name: make sure kubespray is at the correct version
      command: git submodule update --init
      args:
        chdir: "{{ playbook_dir | dirname }}"
      delegate_to: localhost
  vars:
    ansible_become: no
    ansible_connection: local
  tags:
    - local

# Set up passwordless sudo and SSH keys if needed
- include: bootstrap-ssh.yml
  tags:
    - bootstrap
- include: bootstrap-sudo.yml
  tags:
    - bootstrap

# Install Kubernetes
- include: ../kubespray/cluster.yml
  vars:
    ansible_become: true
    kubeadm_enabled: true
    kube_api_anonymous_auth: true
    kubectl_localhost: true
    kubeconfig_localhost: true
    helm_enabled: true
    tiller_node_selectors: "node-role.kubernetes.io/node=''"
    docker_dns_servers_strict: no
    docker_storage_options: -s overlay2

# Disable swap (required for k8s), kubespray method doesn't quite cut it
- hosts: all
  become: true
  tasks:
    - name: remove swap from fstab
      lineinfile: path=/etc/fstab regexp='swap' state=absent
    - name: disable swap
      command: swapoff -a
  tags:
    - swap

# Create artifact of kube config
- hosts: kube-master
  become: true
  tasks:
    - name: set kube config artifact
      set_stats:
        data:
          kube_config: "{{ lookup('file', inventory_dir + '/artifacts/admin.conf') }}"
      run_once: true
 
# Manage Kubernetes cluster access config file
- hosts: all
  gather_facts: false
  vars:
    ansible_become: no
    config_dir: "../config"
  tasks:
    - name: register config path
      stat:
        path: "../k8s-config"
      register: k8s_config_dir
      delegate_to: localhost
    - set_fact:
        config_dir: "../k8s-config"
      when: k8s_config_dir.stat.exists
      delegate_to: localhost
    - name: create kube config directory for current user
      file:
        path: "{{ lookup('env','HOME') + '/.kube/' }}"
        state: directory
      delegate_to: localhost
    - name: check for kube config file
      stat:
        path: "{{ config_dir }}/artifacts/admin.conf"
      register: kubeconf
      delegate_to: localhost
    - name: copy kube config file for current user
      copy:
        src: "{{ config_dir }}/artifacts/admin.conf"
        dest: "{{ lookup('env','HOME') + '/.kube/config' }}"
        backup: yes
      when: kubeconf.stat.exists
      delegate_to: localhost
  tags:
    - local

# Install driver and container runtime on GPU servers
- include: nvidia-driver.yml
  tags:
    - nvidia
- include: nvidia-docker.yml
  vars:
    # Docker Configuration
    # Setting reference: https://docs.nvidia.com/deeplearning/dgx/user-guide/index.html
    docker_daemon_json:
      bip: 192.168.99.1/24
      #default-shm-size: 1G
      default-ulimits:
        memlock:
          name: memlock
          hard: -1
          soft: -1
        stack:
          name: stack
          hard: 67108864
          soft: 67108864
      default-runtime: nvidia
      runtimes:
        nvidia:
          path: /usr/bin/nvidia-container-runtime
          runtimeArgs: []
  tags:
    - nvidia

# Install k8s GPU device plugin
- include: k8s-gpu-plugin.yml

# Manage kubectl binary
- hosts: all
  gather_facts: false
  vars:
    ansible_become: no
    config_dir: "../config"
  tasks:
    - name: register config path
      stat:
        path: "../k8s-config"
      register: k8s_config_dir
      delegate_to: localhost
    - set_fact:
        config_dir: "../k8s-config"
      when: k8s_config_dir.stat.exists
      delegate_to: localhost
    - name: check for kubectl
      stat:
        path: "{{ config_dir }}/artifacts/kubectl"
      register: kubectl_local
      delegate_to: localhost
    - name: modify kubectl permissions
      file:
        path: "{{ config_dir }}/artifacts/kubectl"
        mode: '0755'
      when: kubectl_local.stat.exists
      delegate_to: localhost
    - name: copy kubectl 
      copy:
        src: "{{ config_dir }}/artifacts/kubectl"
        dest: "/usr/local/bin/kubectl"
      when: kubectl_local.stat.exists
      become: true
      ignore_errors: yes
      register: kubectl_copied
      delegate_to: localhost
    - name: check for copied kubectl
      stat:
        path: "/usr/local/bin/kubectl"
      register: kubectl_system
      delegate_to: localhost
    - name: modify kubectl permissions
      file:
        path: "/usr/local/bin/kubectl"
        owner: root
        group: root
        mode: '0755'
      ignore_errors: yes
      when: kubectl_system.stat.exists
      delegate_to: localhost
    - name: manually move kubectl binary
      debug:
        msg: "Unable to move kubectl, run: sudo cp {{ config_dir | realpath }}/artifacts/kubectl /usr/local/bin"
      when: kubectl_copied is failed
      delegate_to: localhost
  tags:
    - local

- name: Add Mellanox RoCE backend
  import_playbook: roce/roce.yaml
  vars:
    pf1: enp53s0
    pf2: enp58s0
    pf3: enp184s0
    pf4: enp189s0
    pf5: enp88s0
    pf6: enp93s0
    pf7: enp225s0
    pf8: enp230s0
    dev_id: "1018"
  when: roce_backend
  tags:
    - roce

